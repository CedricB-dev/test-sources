@inject ILogger<CounterButton> Logger

<button @attributes="OtherAttributes" @onclick="@OnClick">@ChildContent</button>

@code {
    private bool _shouldRender = false;
    private int _prevEventHashCode = 0;
    
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? OtherAttributes { get; set; }
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public EventCallback OnClick { get; set; }
    
    public override Task SetParametersAsync(ParameterView parameters)
    {
        Logger.LogDebug("{Component} | {Method} ",
            nameof(CounterButton), nameof(SetParametersAsync));
        return base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet()
    {
        //_shouldRender = OnClick.GetHashCode() != _prevEventHashCode;
        
        Logger.LogDebug("{Component} | {Method} | {PrevHashCode} | {NewHasCode} | ShouldRender : {ShouldRender} ",
            nameof(CounterButton), nameof(OnParametersSet), _prevEventHashCode, OnClick.GetHashCode(),
            _shouldRender);
        
        _prevEventHashCode = OnClick.GetHashCode();
    }

    protected override void OnInitialized()
    {
        Logger.LogDebug("{Component} | {Method}",
            nameof(CounterButton), nameof(OnInitialized));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Logger.LogDebug("{Component} | {Method} | IsFirstRender : {FirstRender} ",
            nameof(CounterButton), nameof(OnAfterRender), firstRender);
    }

    protected override bool ShouldRender() => _shouldRender;
}